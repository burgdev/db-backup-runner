{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"DB Backup Runner <p> Backup multiple database containers from one backup runner container. </p> <p> Documentation     | Docker     | PyPi </p> <p>DB Backup Runner is used to backup any database from other containers. Since it uses the backup tool (e.g. <code>pgdump</code>) from inside the database container it is easy to add support for many databases.</p> <p>The script can also make backups from multiple containers and is configured with labels (in docker compose).</p> <p>For more information check out the documentation.</p>"},{"location":"#credits","title":"Credits","text":"<p>Inspired by</p> <ul> <li>https://github.com/RealOrangeOne/docker-db-auto-backup for some initial source code (2024/12)</li> <li>https://github.com/prodrigestivill/docker-postgres-backup-local for the idea with the docker labels</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#013-2025-01-03","title":"0.1.3 - 2025-01-03","text":""},{"location":"changelog/#documentation","title":"\ud83d\udcdd Documentation","text":"<ul> <li>Add pypi to package section (#31)</li> </ul>"},{"location":"changelog/#miscellaneous","title":"\ud83c\udf00 Miscellaneous","text":"<ul> <li>Add cli help tests (#32)</li> </ul>"},{"location":"changelog/#012-2024-12-26","title":"0.1.2 - 2024-12-26","text":""},{"location":"changelog/#documentation_1","title":"\ud83d\udcdd Documentation","text":"<ul> <li>Update README.md and add CONTRIBUTING.md (#20)</li> <li>Add documentation (#19)</li> </ul>"},{"location":"changelog/#011-2024-12-16","title":"0.1.1 - 2024-12-16","text":""},{"location":"changelog/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Add command to automatically create a restore script (#1, #2)</li> </ul>"},{"location":"cli/","title":"Command Line Interface","text":"<p>A command line interface is used to backup and restore the databases. For a one time backup the <code>backup</code> subcommand is used, to run it as a cron job the <code>backup-cron</code> subcommand is used.</p> <pre><code>db-backup-runner backup-cron\n</code></pre> <p>Usually the cron job is started as docker compose service, which is the default entry point. The documented arguments can be used either in <code>command</code> or <code>environment</code> section.</p>"},{"location":"cli/#db-backup-runner","title":"db-backup-runner","text":"<p>Main command to backup and restore databases.</p> <p>Usage:</p> <pre><code>db-backup-runner [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -v, --verbose  Enable verbose output.  [env var: DB_BACKUP_VERBOSE]\n  --help         Show this message and exit.\n</code></pre> <p>Subcommands</p> <ul> <li>backup: Run a manual backup.</li> <li>backup-cron: Run backup based on the schedule.</li> <li>restore: Restore a backup for a specific container.</li> </ul>"},{"location":"cli/#db-backup-runner-backup","title":"db-backup-runner backup","text":"<p>Run a manual backup.</p> <p>Usage:</p> <pre><code>db-backup-runner backup [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -c, --compression [gzip|lzma|xz|bz2|plain]\n                                  Compression algorithm.  [env var:\n                                  DB_BACKUP_COMPRESSION; default: plain]\n  -p, --project TEXT              Project name, used if it is not started with\n                                  docker compose.  [env var:\n                                  DB_BACKUP_PROJECT_NAME]\n  -b, --backup-dir TEXT           Backup directory.  [env var: DB_BACKUP_DIR;\n                                  default: /tmp/db_backup_runner]\n  -t, --use-timestamp             Add a timestamp to the backup filename.\n                                  [env var: DB_BACKUP_USE_TIMESTAMP]\n  -w, --webhook TEXT              Heartbeat webhook address.  [env var:\n                                  DB_BACKUP_WEBHOOK]\n  -g, --global                    Run in global mode, backup any container\n                                  (e.g. not just the one defined in\n                                  'project'.).  [env var: DB_BACKUP_GLOBAL]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"cli/#db-backup-runner-backup-cron","title":"db-backup-runner backup-cron","text":"<p>Run backup based on the schedule.</p> <p>Usage:</p> <pre><code>db-backup-runner backup-cron [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -c, --cron TEXT                 Cron schedule (https://crontab.guru), per\n                                  default it runs at 2am every day.  [env var:\n                                  DB_BACKUP_CRON; default: 0 2 * * *]\n  -o, --on-startup                Run backup on startup as well.  [env var:\n                                  DB_BACKUP_ON_STARTUP]\n  -c, --compression [gzip|lzma|xz|bz2|plain]\n                                  Compression algorithm.  [env var:\n                                  DB_BACKUP_COMPRESSION; default: plain]\n  -p, --project TEXT              Project name, used if it is not started with\n                                  docker compose.  [env var:\n                                  DB_BACKUP_PROJECT_NAME]\n  -b, --backup-dir TEXT           Backup directory.  [env var: DB_BACKUP_DIR;\n                                  default: /tmp/db_backup_runner]\n  -t, --use-timestamp             Add a timestamp to the backup filename.\n                                  [env var: DB_BACKUP_USE_TIMESTAMP]\n  -w, --webhook TEXT              Heartbeat webhook address.  [env var:\n                                  DB_BACKUP_WEBHOOK]\n  -g, --global                    Run in global mode, backup any container\n                                  (e.g. not just the one defined in\n                                  'project'.).  [env var: DB_BACKUP_GLOBAL]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"cli/#db-backup-runner-restore","title":"db-backup-runner restore","text":"<p>Restore a backup for a specific container.</p> <p>Usage:</p> <pre><code>db-backup-runner restore [OPTIONS] RESTORE_FILE\n</code></pre> <p>Options:</p> <pre><code>  -p, --project TEXT              Project name, used if it is not started with\n                                  docker compose.  [env var:\n                                  DB_BACKUP_PROJECT_NAME]\n  -t, --target CONTAINER|SERVICE  Optional target which is either a container\n                                  id, name or service name.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"docu/","title":"Getting Started","text":""},{"location":"docu/#db-backup-runner","title":"DB Backup Runner","text":"<p>DB Backup Runner is used to backup any database from other containers. Since it uses the backup tool (e.g. <code>pgdump</code>) from inside the database container it is easy to add support for many databases.</p> <p>The script can also make backups from multiple containers and is configured with labels.</p> <p>Note</p> <p>It works best together with <code>docker compose</code>, although it should work with docker alone, but at the moment it is only tested with <code>docker compose</code>. For more see packages.</p> <p>Each database which needs a backup need the <code>db-backup-runner.enable=true</code> label, as shown in the following docker compose configuration file:</p> Example docker compose fil with two databases and a backup runner container<pre><code>services:\n  db-backup:  # Backup container\n    image: ghcr.io/burgdev/db-backup-runner:latest # (1)!\n    restart: unless-stopped\n    container_name: docker-db-auto-backup\n    command: \"backup-cron --on-startup\" # optional (2)\n    environment:\n      DB_BACKUP_CRON: \"0 4 * * *\" # (3)!\n      DB_BACKUP_WEBHOOK: \"https://my-webhook.io/myapp\"\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\" # required\n      - ./backups:/tmp/db_backup_runner # required, backup directory\n\n  app:\n    image: myapp:latest\n    environment:\n      DATABASE_URL: postgresql://user:password@db:5432/app_db\n      REDIS_URL: redis://redis:6379\n    depends_on:\n      - db\n      - redis\n\n  postgis:\n    image: postgis/postgis:16-3-alpine  # PostgreSQL with PostGIS support\n    environment:\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n      POSTGRES_DB: app_db\n    labels: # (4)!\n      - \"db-backup-runner.enable=true\"\n      # optional\n      - `db-backup-runner.dump_args=-Ft`\n\n  redis:\n    image: redis:alpine\n    labels:\n      - \"db-backup-runner.enable=true\"\n      # optional\n      - \"db-backup-runner.backup_provider=redis\"\n      - \"db-backup-runner.webhook=none\" # disable global webhook for this container\n</code></pre> <ol> <li>Backup container (~60MB), responsible to run a cron jobs which runs the backups</li> <li>The <code>command</code> is only used if additional arguments are needed. The subcommand (in this case <code>backup-cron</code>) is required.    It is also possible to use environment variables instead.</li> <li>Schedule the backups, use cron syntax.</li> <li>Labels are used to configure the backup for each container. Only the <code>db-backup-runner.enable=true</code> is required.</li> </ol> <p>The backup container runs a cron job which backs up all container which are enabled and have a backup provider.</p> <p>At the moment the following providers are supported:</p> <ul> <li>Postgres (<code>db_dump</code>)</li> </ul> <p>Warning</p> <p>Only postgres is tested at the moment, the others might not work yet!</p> <ul> <li>MariaDB (<code>mariadb-dump</code>)</li> <li>MySQL (<code>mysqldump</code>)</li> <li>Redis (<code>redis-cli</code>)</li> </ul> <p>But it is easy to create additional providers and mount them into the backup container (<code>./custom:/app/src/db_backup_runner/custom</code>), see db_backup_runner.custom.provider. The custom backup providers are loaded first, this means you can overwrite existing providers (same name) or add new ones (different name).</p>"},{"location":"docu/#command-arguments","title":"Command Arguments","text":"<p>This are the possible command arguments (or environment variables).</p>"},{"location":"docu/#backup-cron","title":"backup-cron","text":"<p>Run backup based on the schedule.</p> <p>Usage:</p> <pre><code>backup-cron [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -c, --cron TEXT                 Cron schedule (https://crontab.guru), per\n                                  default it runs at 2am every day.  [env var:\n                                  DB_BACKUP_CRON; default: 0 2 * * *]\n  -o, --on-startup                Run backup on startup as well.  [env var:\n                                  DB_BACKUP_ON_STARTUP]\n  -c, --compression [gzip|lzma|xz|bz2|plain]\n                                  Compression algorithm.  [env var:\n                                  DB_BACKUP_COMPRESSION; default: plain]\n  -p, --project TEXT              Project name, used if it is not started with\n                                  docker compose.  [env var:\n                                  DB_BACKUP_PROJECT_NAME]\n  -b, --backup-dir TEXT           Backup directory.  [env var: DB_BACKUP_DIR;\n                                  default: /tmp/db_backup_runner]\n  -t, --use-timestamp             Add a timestamp to the backup filename.\n                                  [env var: DB_BACKUP_USE_TIMESTAMP]\n  -w, --webhook TEXT              Heartbeat webhook address.  [env var:\n                                  DB_BACKUP_WEBHOOK]\n  -g, --global                    Run in global mode, backup any container\n                                  (e.g. not just the one defined in\n                                  'project'.).  [env var: DB_BACKUP_GLOBAL]\n  --help                          Show this message and exit.\n</code></pre> <p>The other <code>db-backup-runner</code> subcommands are documented here.</p>"},{"location":"docu/#labels","title":"Labels","text":"<p>Labels are used to control each containers backup.</p>"},{"location":"docu/#required","title":"Required","text":"<code>db-backup-runner.enable = true|false</code> Enabled or disable backup"},{"location":"docu/#optional","title":"Optional","text":"<code>db-backup-runner.backup_provider = postres|mysql|mariadb|readis|...</code> Provider, only needed if it cannot figure it out. <code>db-backup-runner.dump_binary = &lt;custom binary name or path&gt;</code> If the default command doesn't work. <code>db-backup-runner.dump_args = &lt;additional args&gt;</code> Additional arguments for the <code>dump</code> command. <code>db-backup-runner.min_file_size = &lt;number&gt;</code> A sanity check is done for the file size, this can be changed per container (default: 200) <code>db-backup-runner.webhook = &lt;custom webhook address&gt;|none</code> If one container should use a different webhook address or don't use it at all."},{"location":"docu/#defaults","title":"Defaults","text":"<p>The default values are described in the API reference:</p> <ul> <li>Postgres</li> </ul> <p>Warning</p> <p>Only postgres is tested at the moment, the others might not work yet!</p> <ul> <li>MySQL</li> <li>MariaDB</li> <li>Redis</li> </ul>"},{"location":"docu/#restore","title":"Restore","text":""},{"location":"docu/#docker-compose","title":"Docker Compose","text":"<p>Restoring is not fully implemented yet, but you can create a bash script which helps to restore the data base. This gives you also the flexibility to change it accordingly to your needs.</p> <pre><code> docker compose run db-backup restore ./backups/postgis/postgis.postgres.dump\n #&gt; shows the backup commands\n # you can save it into a script\n docker compose run db-backup restore ./backups/postgis/postgis.postgres.dump restore.sh\n chmod +x restore.sh\n # make sure everything is correct, replace DATABASE with the correct database\n vim restore.sh\n ./restore.sh # run it from the host\n</code></pre> <p>Your can create the script for just one service:</p> <pre><code> docker compose run db-backup restore --target redis ./.../redis.redis.rdb\n</code></pre> <p>This are the main commands needed to restore a database</p> <pre><code># copy dump file into the docker container\ndocker compose cp backups/postgis/postgis.postgres.dump psql:/tmp/db.dump\ndocker compose exec postgis pg_restore -Fc -U USER -d DATABASE /tmp/db.dump\n</code></pre>"},{"location":"docu/#host","title":"Host","text":"<p>You can run the <code>db-backup-runner</code> script directly on your host. Install this package and use the same commands as above without <code>docker compose run</code></p>"},{"location":"packages/","title":"Packages","text":""},{"location":"packages/#docker","title":"Docker","text":"<p>Docker images are created with the following tags:</p> <ul> <li><code>latest</code>: latest stable version</li> <li><code>major</code>, <code>major.minor</code> and <code>major.minor.rev</code> tags</li> <li><code>edge</code>: unstable development version</li> </ul> Docker ComposeDocker <p>It is recommaded to use <code>docker compose</code>:</p> <p>Example docker compose fil with two databases and a backup runner container<pre><code>services:\n  db-backup:\n    image: ghcr.io/burgdev/db-backup-runner:next-alpine\n    restart: unless-stopped\n    container_name: docker-db-auto-backup\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\" # required\n      - ./backups:/tmp/db_backup_runner # required, backup directory\n</code></pre> Run a custom command:</p> <pre><code>$ docker compose up # start services\n$ docker compose run db-backup [OPTIONS] COMMAND [ARGS]... # (1)!\n</code></pre> <ol> <li>Run <code>db-backup-runner</code> subcommands.</li> </ol> <p>It is also possible to run it with docker directly:</p> Pull latest docker image<pre><code>$ docker pull ghcr.io/burgdev/db-backup-runner:latest\n$ docker run --rm -it \\\n    -v /var/run/docker.sock:/var/run/docker.sock:ro \\\n    -v ./backups:/tmp/db_backup_runner ghcr.io/burgdev/db-backup-runner:latest \\\n    backup --project my-project\n</code></pre> <p>Tip</p> <p>A <code>--project</code> name is needed or the <code>--global</code> flag in order to find the backup containers.</p>"},{"location":"packages/#pypi","title":"PyPi","text":"<p>The script is also published as PyPi package.</p> <code>uv</code><code>pipx</code><code>pip</code> <p>Run it as <code>uv</code> tool:</p> <pre><code>$ uvx db-backup-runner [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Install it in isolated environment with <code>pipx</code>:</p> <pre><code>$ pipx install db-backup-runner\n$ db-backup-runner [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Install it with <code>pip</code>:</p> <pre><code>$ pip install db-backup-runner\n$ db-backup-runner [OPTIONS] COMMAND [ARGS]...\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>db_backup_runner<ul> <li>cli</li> <li>custom<ul> <li>provider</li> </ul> </li> <li>manager</li> <li>provider</li> <li>types</li> <li>utils</li> </ul> </li> </ul>"},{"location":"reference/db_backup_runner/","title":"db_backup_runner","text":""},{"location":"reference/db_backup_runner/#db_backup_runner","title":"db_backup_runner","text":"<p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            <p>Command line interface, see also cli help.</p> </li> <li> <code>custom</code>           \u2013            <p>The custom directory is used if additonal changes are needed</p> </li> <li> <code>manager</code>           \u2013            <p>Main module which manages the backups and restore functions</p> </li> <li> <code>provider</code>           \u2013            <p>Backup provider classes</p> </li> <li> <code>types</code>           \u2013            <p>Type definitions</p> </li> <li> <code>utils</code>           \u2013            <p>Utility functions</p> </li> </ul>"},{"location":"reference/db_backup_runner/cli/","title":"cli","text":""},{"location":"reference/db_backup_runner/cli/#db_backup_runner.cli","title":"cli","text":"<p>Command line interface, see also cli help.</p> <p>Functions:</p> <ul> <li> <code>cli</code>             \u2013              <p>Main command to backup and restore databases.</p> </li> <li> <code>backup_cron</code>             \u2013              <p>Run backup based on the schedule.</p> </li> <li> <code>backup</code>             \u2013              <p>Run a manual backup.</p> </li> <li> <code>restore</code>             \u2013              <p>Restore a backup for a specific container.</p> </li> </ul>"},{"location":"reference/db_backup_runner/cli/#db_backup_runner.cli-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/cli/#db_backup_runner.cli-classes","title":"Classes","text":""},{"location":"reference/db_backup_runner/cli/#db_backup_runner.cli-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/cli/#db_backup_runner.cli.cli","title":"cli","text":"<pre><code>cli(verbose)\n</code></pre> <p>Main command to backup and restore databases.</p>"},{"location":"reference/db_backup_runner/cli/#db_backup_runner.cli.backup_cron","title":"backup_cron","text":"<pre><code>backup_cron(schedule, on_startup, backup_dir, **kwargs)\n</code></pre> <p>Run backup based on the schedule.</p>"},{"location":"reference/db_backup_runner/cli/#db_backup_runner.cli.backup","title":"backup","text":"<pre><code>backup(backup_dir, **kwargs)\n</code></pre> <p>Run a manual backup.</p>"},{"location":"reference/db_backup_runner/cli/#db_backup_runner.cli.restore","title":"restore","text":"<pre><code>restore(target, restore_file, **kwargs)\n</code></pre> <p>Restore a backup for a specific container.</p>"},{"location":"reference/db_backup_runner/manager/","title":"manager","text":""},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager","title":"manager","text":"<p>Main module which manages the backups and restore functions</p> <p>Classes:</p> <ul> <li> <code>BackupManager</code>           \u2013            <p>Manages the backups and restore functions</p> </li> </ul>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager-classes","title":"Classes","text":""},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager","title":"BackupManager","text":"<pre><code>BackupManager(\n    compression: CompressionAlgorithm = \"plain\",\n    backup_dir: Path = DEFAULT_BACKUP_DIR,\n    use_timestamp: bool = False,\n    use_secret: bool = False,\n    webhook_url: str = \"\",\n    project_name: str = \"\",\n    global_mode: bool = False,\n)\n</code></pre> <p>Manages the backups and restore functions</p> <p>Methods:</p> <ul> <li> <code>get_temp_backup_file_name</code>             \u2013              </li> <li> <code>get_backup_filename</code>             \u2013              </li> <li> <code>get_my_container_id</code>             \u2013              </li> <li> <code>get_compose_project</code>             \u2013              </li> <li> <code>get_enabled_containers</code>             \u2013              </li> <li> <code>get_backup_provider</code>             \u2013              </li> <li> <code>backup</code>             \u2013              </li> <li> <code>restore</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>BACKUP_PROVIDERS</code>               (<code>list[type[BackupProviderBase]]</code>)           \u2013            </li> <li> <code>compression</code>               (<code>CompressionAlgorithm</code>)           \u2013            </li> <li> <code>backup_dir</code>           \u2013            </li> <li> <code>use_timestamp</code>           \u2013            </li> <li> <code>strtimestamp</code>               (<code>str</code>)           \u2013            </li> <li> <code>use_secret</code>           \u2013            </li> <li> <code>webhook_url</code>           \u2013            </li> <li> <code>global_mode</code>           \u2013            </li> <li> <code>porject_name</code>           \u2013            </li> <li> <code>docker_client</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.BACKUP_PROVIDERS","title":"BACKUP_PROVIDERS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BACKUP_PROVIDERS: list[type[BackupProviderBase]] = (\n    BACKUP_PROVIDERS\n)\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.compression","title":"compression  <code>instance-attribute</code>","text":"<pre><code>compression: CompressionAlgorithm = compression\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.backup_dir","title":"backup_dir  <code>instance-attribute</code>","text":"<pre><code>backup_dir = backup_dir\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.use_timestamp","title":"use_timestamp  <code>instance-attribute</code>","text":"<pre><code>use_timestamp = use_timestamp\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.strtimestamp","title":"strtimestamp  <code>instance-attribute</code>","text":"<pre><code>strtimestamp: str = (\n    strftime(\"%Y%m%d%H%M%S\") if use_timestamp else \"\"\n)\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.use_secret","title":"use_secret  <code>instance-attribute</code>","text":"<pre><code>use_secret = use_secret\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.webhook_url","title":"webhook_url  <code>instance-attribute</code>","text":"<pre><code>webhook_url = webhook_url\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.global_mode","title":"global_mode  <code>instance-attribute</code>","text":"<pre><code>global_mode = global_mode\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.porject_name","title":"porject_name  <code>instance-attribute</code>","text":"<pre><code>porject_name = project_name\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.docker_client","title":"docker_client  <code>instance-attribute</code>","text":"<pre><code>docker_client = from_env()\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.get_temp_backup_file_name","title":"get_temp_backup_file_name","text":"<pre><code>get_temp_backup_file_name(\n    provider: BackupProviderBase,\n) -&gt; str\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.get_backup_filename","title":"get_backup_filename","text":"<pre><code>get_backup_filename(\n    container: Container, provider: BackupProviderBase\n) -&gt; Path\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.get_my_container_id","title":"get_my_container_id","text":"<pre><code>get_my_container_id()\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.get_compose_project","title":"get_compose_project","text":"<pre><code>get_compose_project()\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.get_enabled_containers","title":"get_enabled_containers","text":"<pre><code>get_enabled_containers() -&gt; Iterable[Container]\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.get_backup_provider","title":"get_backup_provider","text":"<pre><code>get_backup_provider(\n    container: Container,\n) -&gt; Optional[BackupProviderBase]\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.backup","title":"backup","text":"<pre><code>backup(now: datetime) -&gt; int\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager.BackupManager.restore","title":"restore","text":"<pre><code>restore(target: str, restore_file: Path) -&gt; int\n</code></pre>"},{"location":"reference/db_backup_runner/manager/#db_backup_runner.manager-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/types/","title":"types","text":""},{"location":"reference/db_backup_runner/types/#db_backup_runner.types","title":"types","text":"<p>Type definitions</p> <p>Attributes:</p> <ul> <li> <code>CompressionAlgorithm</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/types/#db_backup_runner.types-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/types/#db_backup_runner.types.CompressionAlgorithm","title":"CompressionAlgorithm  <code>module-attribute</code>","text":"<pre><code>CompressionAlgorithm = Literal[\n    \"plain\", \"gzip\", \"lzma\", \"xz\", \"bz2\"\n]\n</code></pre>"},{"location":"reference/db_backup_runner/utils/","title":"utils","text":""},{"location":"reference/db_backup_runner/utils/#db_backup_runner.utils","title":"utils","text":"<p>Utility functions</p> <p>Functions:</p> <ul> <li> <code>get_compressed_file_extension</code>             \u2013              </li> <li> <code>open_file_compressed</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>compression_algorithms</code>               (<code>list[CompressionAlgorithm]</code>)           \u2013            </li> <li> <code>DEFAULT_BACKUP_DIR</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/utils/#db_backup_runner.utils-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/utils/#db_backup_runner.utils.compression_algorithms","title":"compression_algorithms  <code>module-attribute</code>","text":"<pre><code>compression_algorithms: list[CompressionAlgorithm] = [\n    \"gzip\",\n    \"lzma\",\n    \"xz\",\n    \"bz2\",\n    \"plain\",\n]\n</code></pre>"},{"location":"reference/db_backup_runner/utils/#db_backup_runner.utils.DEFAULT_BACKUP_DIR","title":"DEFAULT_BACKUP_DIR  <code>module-attribute</code>","text":"<pre><code>DEFAULT_BACKUP_DIR = Path('/tmp/db_backup_runner')\n</code></pre>"},{"location":"reference/db_backup_runner/utils/#db_backup_runner.utils-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/utils/#db_backup_runner.utils.get_compressed_file_extension","title":"get_compressed_file_extension","text":"<pre><code>get_compressed_file_extension(\n    algorithm: CompressionAlgorithm,\n) -&gt; str\n</code></pre>"},{"location":"reference/db_backup_runner/utils/#db_backup_runner.utils.open_file_compressed","title":"open_file_compressed","text":"<pre><code>open_file_compressed(\n    file_path: Path, algorithm: CompressionAlgorithm\n) -&gt; IO[bytes]\n</code></pre>"},{"location":"reference/db_backup_runner/custom/","title":"custom","text":""},{"location":"reference/db_backup_runner/custom/#db_backup_runner.custom","title":"custom","text":"<p>The custom directory is used if additonal changes are needed</p> <p>This can be mounted into a docker container and replaced with custom script. The files here are only templaes and are not used.</p> <p>Modules:</p> <ul> <li> <code>provider</code>           \u2013            <p>Custom provider classes</p> </li> </ul>"},{"location":"reference/db_backup_runner/custom/provider/","title":"provider","text":""},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider","title":"provider","text":"<p>Custom provider classes</p> <p>Classes:</p> <ul> <li> <code>CustomProvider</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.BACKUP_PROVIDERS","title":"BACKUP_PROVIDERS  <code>module-attribute</code>","text":"<pre><code>BACKUP_PROVIDERS = [CustomProvider]\n</code></pre>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider-classes","title":"Classes","text":""},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider","title":"CustomProvider","text":"<pre><code>CustomProvider(\n    container: Container,\n    compression: CompressionAlgorithm | None = None,\n)\n</code></pre> <p>Backup provider constructor</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>dump</code>             \u2013              <p>Dump database</p> </li> <li> <code>restore</code>             \u2013              <p>Restore database</p> </li> <li> <code>is_backup_provider</code>             \u2013              <p>Checks if container supports a backup provider</p> </li> <li> <code>validate_file</code>             \u2013              <p>Validate the generated file</p> </li> <li> <code>trigger_webhook</code>             \u2013              <p>Trigger webhook.</p> </li> <li> <code>trigger_error_webhook</code>             \u2013              <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p> </li> <li> <code>trigger_success_webhook</code>             \u2013              <p>Triggers an success on the webhook.</p> </li> <li> <code>get_dump_binary</code>             \u2013              <p>Get the binary used to dump the backup.</p> </li> <li> <code>get_dump_args</code>             \u2013              <p>Arguments for the dump binary.</p> </li> <li> <code>get_restore_binary</code>             \u2013              <p>Get the binary used to restore the backup.</p> </li> <li> <code>get_restore_args</code>             \u2013              <p>Arguments for the restore binary.</p> </li> <li> <code>get_container_env</code>             \u2013              <p>Get environment variables from container.</p> </li> <li> <code>binary_exists_in_container</code>             \u2013              <p>Check if binary exists inside the container.</p> </li> <li> <code>get_container_label</code>             \u2013              <p>Get labels for container.</p> </li> <li> <code>get_service_name</code>             \u2013              <p>Get service name (only if started with docker compose).</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>default_dump_binary</code>               (<code>str | None</code>)           \u2013            <p>Default dump binary</p> </li> <li> <code>default_dump_args</code>               (<code>str | None</code>)           \u2013            <p>Default dump binary arguments</p> </li> <li> <code>default_restore_binary</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary</p> </li> <li> <code>default_restore_args</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary arguments</p> </li> <li> <code>min_file_size</code>               (<code>int</code>)           \u2013            <p>Maximum file size, used to validate the generated file</p> </li> <li> <code>pattern</code>               (<code>str | None</code>)           \u2013            <p>Pattern which is checked in the dumped file</p> </li> <li> <code>plain_file_extension</code>               (<code>str</code>)           \u2013            <p>File extenstion used for the dumped file</p> </li> <li> <code>compression</code>               (<code>CompressionAlgorithm | None</code>)           \u2013            <p>Compression algorithm</p> </li> <li> <code>container</code>               (<code>Container</code>)           \u2013            <p>Container object</p> </li> <li> <code>name</code>           \u2013            </li> <li> <code>dump_binary</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider(container)","title":"<code>container</code>","text":"(<code>Container</code>)           \u2013            <p>Container object</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider(compression)","title":"<code>compression</code>","text":"(<code>CompressionAlgorithm | None</code>, default:                   <code>None</code> )           \u2013            <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.default_dump_binary","title":"default_dump_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_binary: str | None = None\n</code></pre> <p>Default dump binary</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.default_dump_args","title":"default_dump_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_args: str | None = None\n</code></pre> <p>Default dump binary arguments</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.default_restore_binary","title":"default_restore_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_binary: str | None = 'RESTORE_COMMAND'\n</code></pre> <p>Default restore binary</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.default_restore_args","title":"default_restore_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_args: str | None = ''\n</code></pre> <p>Default restore binary arguments</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.min_file_size","title":"min_file_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_file_size: int = 200\n</code></pre> <p>Maximum file size, used to validate the generated file</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern: str | None = None\n</code></pre> <p>Pattern which is checked in the dumped file</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.plain_file_extension","title":"plain_file_extension  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plain_file_extension: str = '.sql'\n</code></pre> <p>File extenstion used for the dumped file</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.compression","title":"compression  <code>instance-attribute</code>","text":"<pre><code>compression: CompressionAlgorithm | None = compression\n</code></pre> <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.container","title":"container  <code>instance-attribute</code>","text":"<pre><code>container: Container = container\n</code></pre> <p>Container object</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'custom'\n</code></pre>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.dump_binary","title":"dump_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dump_binary = None\n</code></pre>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.dump","title":"dump","text":"<pre><code>dump() -&gt; str\n</code></pre> <p>Dump database</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.restore","title":"restore","text":"<pre><code>restore(backup_file: Path) -&gt; None\n</code></pre> <p>Restore database</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.is_backup_provider","title":"is_backup_provider","text":"<pre><code>is_backup_provider() -&gt; bool\n</code></pre> <p>Checks if container supports a backup provider</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.validate_file","title":"validate_file","text":"<pre><code>validate_file(file_path: Path) -&gt; bool\n</code></pre> <p>Validate the generated file</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.trigger_webhook","title":"trigger_webhook","text":"<pre><code>trigger_webhook(\n    message: str,\n    address: str,\n    code: int = 0,\n    append: str = \"\",\n) -&gt; None\n</code></pre> <p>Trigger webhook.</p> <p>Parameters:</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.trigger_webhook(message)","title":"<code>message</code>","text":"(<code>str</code>)           \u2013            <p>Message send to the webhook</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.trigger_webhook(address)","title":"<code>address</code>","text":"(<code>str</code>)           \u2013            <p>If not set taken from the label</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.trigger_webhook(code)","title":"<code>code</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Code which is sent to the webhook</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.trigger_webhook(append)","title":"<code>append</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path appended to address (can be used for fails)</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.trigger_error_webhook","title":"trigger_error_webhook","text":"<pre><code>trigger_error_webhook(\n    message: str, address: str, code: int = 1\n) -&gt; None\n</code></pre> <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.trigger_success_webhook","title":"trigger_success_webhook","text":"<pre><code>trigger_success_webhook(\n    message: str, address: str, code: int = 0\n) -&gt; None\n</code></pre> <p>Triggers an success on the webhook.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.get_dump_binary","title":"get_dump_binary","text":"<pre><code>get_dump_binary() -&gt; str\n</code></pre> <p>Get the binary used to dump the backup.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.get_dump_args","title":"get_dump_args","text":"<pre><code>get_dump_args() -&gt; str\n</code></pre> <p>Arguments for the dump binary.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.get_restore_binary","title":"get_restore_binary","text":"<pre><code>get_restore_binary() -&gt; str\n</code></pre> <p>Get the binary used to restore the backup.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.get_restore_args","title":"get_restore_args","text":"<pre><code>get_restore_args() -&gt; str\n</code></pre> <p>Arguments for the restore binary.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.get_container_env","title":"get_container_env","text":"<pre><code>get_container_env() -&gt; dict[str, str | None]\n</code></pre> <p>Get environment variables from container.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.binary_exists_in_container","title":"binary_exists_in_container","text":"<pre><code>binary_exists_in_container(binary_name: str) -&gt; bool\n</code></pre> <p>Check if binary exists inside the container.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.get_container_label","title":"get_container_label","text":"<pre><code>get_container_label(\n    label: str, default: str | None = None\n) -&gt; str | None\n</code></pre> <p>Get labels for container.</p>"},{"location":"reference/db_backup_runner/custom/provider/#db_backup_runner.custom.provider.CustomProvider.get_service_name","title":"get_service_name","text":"<pre><code>get_service_name() -&gt; str\n</code></pre> <p>Get service name (only if started with docker compose).</p>"},{"location":"reference/db_backup_runner/provider/","title":"provider","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider","title":"provider","text":"<p>Backup provider classes</p> <p>Classes:</p> <ul> <li> <code>BackupProviderBase</code>           \u2013            <p>Base BackupProvider class</p> </li> <li> <code>MySQLBackupProvider</code>           \u2013            </li> <li> <code>MariaDbBackupProvider</code>           \u2013            </li> <li> <code>PostgresBackupProvider</code>           \u2013            <p>Postgres backup provider</p> </li> <li> <code>RedisBackupProvider</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BACKUP_PROVIDERS","title":"BACKUP_PROVIDERS  <code>module-attribute</code>","text":"<pre><code>BACKUP_PROVIDERS = [\n    MariaDbBackupProvider,\n    MySQLBackupProvider,\n    PostgresBackupProvider,\n    RedisBackupProvider,\n]\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider-classes","title":"Classes","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase","title":"BackupProviderBase","text":"<pre><code>BackupProviderBase(\n    container: Container,\n    compression: CompressionAlgorithm | None = None,\n)\n</code></pre> <p>Base BackupProvider class</p> <p>Backup provider constructor</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>dump</code>             \u2013              <p>Dump database</p> </li> <li> <code>restore</code>             \u2013              <p>Restore database</p> </li> <li> <code>is_backup_provider</code>             \u2013              <p>Checks if container supports a backup provider</p> </li> <li> <code>validate_file</code>             \u2013              <p>Validate the generated file</p> </li> <li> <code>trigger_webhook</code>             \u2013              <p>Trigger webhook.</p> </li> <li> <code>trigger_error_webhook</code>             \u2013              <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p> </li> <li> <code>trigger_success_webhook</code>             \u2013              <p>Triggers an success on the webhook.</p> </li> <li> <code>get_dump_binary</code>             \u2013              <p>Get the binary used to dump the backup.</p> </li> <li> <code>get_dump_args</code>             \u2013              <p>Arguments for the dump binary.</p> </li> <li> <code>get_restore_binary</code>             \u2013              <p>Get the binary used to restore the backup.</p> </li> <li> <code>get_restore_args</code>             \u2013              <p>Arguments for the restore binary.</p> </li> <li> <code>get_container_env</code>             \u2013              <p>Get environment variables from container.</p> </li> <li> <code>binary_exists_in_container</code>             \u2013              <p>Check if binary exists inside the container.</p> </li> <li> <code>get_container_label</code>             \u2013              <p>Get labels for container.</p> </li> <li> <code>get_service_name</code>             \u2013              <p>Get service name (only if started with docker compose).</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Backup provider name (e.g. postgres)</p> </li> <li> <code>default_dump_binary</code>               (<code>str | None</code>)           \u2013            <p>Default dump binary</p> </li> <li> <code>default_dump_args</code>               (<code>str | None</code>)           \u2013            <p>Default dump binary arguments</p> </li> <li> <code>default_restore_binary</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary</p> </li> <li> <code>default_restore_args</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary arguments</p> </li> <li> <code>min_file_size</code>               (<code>int</code>)           \u2013            <p>Maximum file size, used to validate the generated file</p> </li> <li> <code>pattern</code>               (<code>str | None</code>)           \u2013            <p>Pattern which is checked in the dumped file</p> </li> <li> <code>plain_file_extension</code>               (<code>str</code>)           \u2013            <p>File extenstion used for the dumped file</p> </li> <li> <code>compression</code>               (<code>CompressionAlgorithm | None</code>)           \u2013            <p>Compression algorithm</p> </li> <li> <code>container</code>               (<code>Container</code>)           \u2013            <p>Container object</p> </li> </ul>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase(container)","title":"<code>container</code>","text":"(<code>Container</code>)           \u2013            <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase(compression)","title":"<code>compression</code>","text":"(<code>CompressionAlgorithm | None</code>, default:                   <code>None</code> )           \u2013            <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = None\n</code></pre> <p>Backup provider name (e.g. postgres)</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.default_dump_binary","title":"default_dump_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_binary: str | None = None\n</code></pre> <p>Default dump binary</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.default_dump_args","title":"default_dump_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_args: str | None = None\n</code></pre> <p>Default dump binary arguments</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.default_restore_binary","title":"default_restore_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_binary: str | None = 'RESTORE_COMMAND'\n</code></pre> <p>Default restore binary</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.default_restore_args","title":"default_restore_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_args: str | None = ''\n</code></pre> <p>Default restore binary arguments</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.min_file_size","title":"min_file_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_file_size: int = 200\n</code></pre> <p>Maximum file size, used to validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern: str | None = None\n</code></pre> <p>Pattern which is checked in the dumped file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.plain_file_extension","title":"plain_file_extension  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plain_file_extension: str = '.sql'\n</code></pre> <p>File extenstion used for the dumped file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.compression","title":"compression  <code>instance-attribute</code>","text":"<pre><code>compression: CompressionAlgorithm | None = compression\n</code></pre> <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.container","title":"container  <code>instance-attribute</code>","text":"<pre><code>container: Container = container\n</code></pre> <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.dump","title":"dump","text":"<pre><code>dump() -&gt; str\n</code></pre> <p>Dump database</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.restore","title":"restore","text":"<pre><code>restore(backup_file: Path) -&gt; None\n</code></pre> <p>Restore database</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.is_backup_provider","title":"is_backup_provider","text":"<pre><code>is_backup_provider() -&gt; bool\n</code></pre> <p>Checks if container supports a backup provider</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.validate_file","title":"validate_file","text":"<pre><code>validate_file(file_path: Path) -&gt; bool\n</code></pre> <p>Validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.trigger_webhook","title":"trigger_webhook","text":"<pre><code>trigger_webhook(\n    message: str,\n    address: str,\n    code: int = 0,\n    append: str = \"\",\n) -&gt; None\n</code></pre> <p>Trigger webhook.</p> <p>Parameters:</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.trigger_webhook(message)","title":"<code>message</code>","text":"(<code>str</code>)           \u2013            <p>Message send to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.trigger_webhook(address)","title":"<code>address</code>","text":"(<code>str</code>)           \u2013            <p>If not set taken from the label</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.trigger_webhook(code)","title":"<code>code</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Code which is sent to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.trigger_webhook(append)","title":"<code>append</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path appended to address (can be used for fails)</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.trigger_error_webhook","title":"trigger_error_webhook","text":"<pre><code>trigger_error_webhook(\n    message: str, address: str, code: int = 1\n) -&gt; None\n</code></pre> <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.trigger_success_webhook","title":"trigger_success_webhook","text":"<pre><code>trigger_success_webhook(\n    message: str, address: str, code: int = 0\n) -&gt; None\n</code></pre> <p>Triggers an success on the webhook.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.get_dump_binary","title":"get_dump_binary","text":"<pre><code>get_dump_binary() -&gt; str\n</code></pre> <p>Get the binary used to dump the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.get_dump_args","title":"get_dump_args","text":"<pre><code>get_dump_args() -&gt; str\n</code></pre> <p>Arguments for the dump binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.get_restore_binary","title":"get_restore_binary","text":"<pre><code>get_restore_binary() -&gt; str\n</code></pre> <p>Get the binary used to restore the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.get_restore_args","title":"get_restore_args","text":"<pre><code>get_restore_args() -&gt; str\n</code></pre> <p>Arguments for the restore binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.get_container_env","title":"get_container_env","text":"<pre><code>get_container_env() -&gt; dict[str, str | None]\n</code></pre> <p>Get environment variables from container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.binary_exists_in_container","title":"binary_exists_in_container","text":"<pre><code>binary_exists_in_container(binary_name: str) -&gt; bool\n</code></pre> <p>Check if binary exists inside the container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.get_container_label","title":"get_container_label","text":"<pre><code>get_container_label(\n    label: str, default: str | None = None\n) -&gt; str | None\n</code></pre> <p>Get labels for container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.BackupProviderBase.get_service_name","title":"get_service_name","text":"<pre><code>get_service_name() -&gt; str\n</code></pre> <p>Get service name (only if started with docker compose).</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider","title":"MySQLBackupProvider","text":"<pre><code>MySQLBackupProvider(\n    container: Container,\n    compression: CompressionAlgorithm | None = None,\n)\n</code></pre> <p>Backup provider constructor</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>dump</code>             \u2013              </li> <li> <code>restore</code>             \u2013              </li> <li> <code>is_backup_provider</code>             \u2013              <p>Checks if container supports a backup provider</p> </li> <li> <code>validate_file</code>             \u2013              <p>Validate the generated file</p> </li> <li> <code>trigger_webhook</code>             \u2013              <p>Trigger webhook.</p> </li> <li> <code>trigger_error_webhook</code>             \u2013              <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p> </li> <li> <code>trigger_success_webhook</code>             \u2013              <p>Triggers an success on the webhook.</p> </li> <li> <code>get_dump_binary</code>             \u2013              <p>Get the binary used to dump the backup.</p> </li> <li> <code>get_dump_args</code>             \u2013              <p>Arguments for the dump binary.</p> </li> <li> <code>get_restore_binary</code>             \u2013              <p>Get the binary used to restore the backup.</p> </li> <li> <code>get_restore_args</code>             \u2013              <p>Arguments for the restore binary.</p> </li> <li> <code>get_container_env</code>             \u2013              <p>Get environment variables from container.</p> </li> <li> <code>binary_exists_in_container</code>             \u2013              <p>Check if binary exists inside the container.</p> </li> <li> <code>get_container_label</code>             \u2013              <p>Get labels for container.</p> </li> <li> <code>get_service_name</code>             \u2013              <p>Get service name (only if started with docker compose).</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>default_dump_args</code>           \u2013            </li> <li> <code>default_restore_binary</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary</p> </li> <li> <code>default_restore_args</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary arguments</p> </li> <li> <code>min_file_size</code>               (<code>int</code>)           \u2013            <p>Maximum file size, used to validate the generated file</p> </li> <li> <code>pattern</code>               (<code>str | None</code>)           \u2013            <p>Pattern which is checked in the dumped file</p> </li> <li> <code>plain_file_extension</code>               (<code>str</code>)           \u2013            <p>File extenstion used for the dumped file</p> </li> <li> <code>compression</code>               (<code>CompressionAlgorithm | None</code>)           \u2013            <p>Compression algorithm</p> </li> <li> <code>container</code>               (<code>Container</code>)           \u2013            <p>Container object</p> </li> <li> <code>name</code>           \u2013            </li> <li> <code>default_dump_binary</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider(container)","title":"<code>container</code>","text":"(<code>Container</code>)           \u2013            <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider(compression)","title":"<code>compression</code>","text":"(<code>CompressionAlgorithm | None</code>, default:                   <code>None</code> )           \u2013            <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.default_dump_args","title":"default_dump_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_args = '--all-databases'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.default_restore_binary","title":"default_restore_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_binary: str | None = 'RESTORE_COMMAND'\n</code></pre> <p>Default restore binary</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.default_restore_args","title":"default_restore_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_args: str | None = ''\n</code></pre> <p>Default restore binary arguments</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.min_file_size","title":"min_file_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_file_size: int = 200\n</code></pre> <p>Maximum file size, used to validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern: str | None = None\n</code></pre> <p>Pattern which is checked in the dumped file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.plain_file_extension","title":"plain_file_extension  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plain_file_extension: str = '.sql'\n</code></pre> <p>File extenstion used for the dumped file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.compression","title":"compression  <code>instance-attribute</code>","text":"<pre><code>compression: CompressionAlgorithm | None = compression\n</code></pre> <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.container","title":"container  <code>instance-attribute</code>","text":"<pre><code>container: Container = container\n</code></pre> <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'mysql'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.default_dump_binary","title":"default_dump_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_binary = 'mysqldump'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.dump","title":"dump","text":"<pre><code>dump() -&gt; str\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.restore","title":"restore","text":"<pre><code>restore(backup_file: Path) -&gt; None\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.is_backup_provider","title":"is_backup_provider","text":"<pre><code>is_backup_provider() -&gt; bool\n</code></pre> <p>Checks if container supports a backup provider</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.validate_file","title":"validate_file","text":"<pre><code>validate_file(file_path: Path) -&gt; bool\n</code></pre> <p>Validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.trigger_webhook","title":"trigger_webhook","text":"<pre><code>trigger_webhook(\n    message: str,\n    address: str,\n    code: int = 0,\n    append: str = \"\",\n) -&gt; None\n</code></pre> <p>Trigger webhook.</p> <p>Parameters:</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.trigger_webhook(message)","title":"<code>message</code>","text":"(<code>str</code>)           \u2013            <p>Message send to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.trigger_webhook(address)","title":"<code>address</code>","text":"(<code>str</code>)           \u2013            <p>If not set taken from the label</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.trigger_webhook(code)","title":"<code>code</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Code which is sent to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.trigger_webhook(append)","title":"<code>append</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path appended to address (can be used for fails)</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.trigger_error_webhook","title":"trigger_error_webhook","text":"<pre><code>trigger_error_webhook(\n    message: str, address: str, code: int = 1\n) -&gt; None\n</code></pre> <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.trigger_success_webhook","title":"trigger_success_webhook","text":"<pre><code>trigger_success_webhook(\n    message: str, address: str, code: int = 0\n) -&gt; None\n</code></pre> <p>Triggers an success on the webhook.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.get_dump_binary","title":"get_dump_binary","text":"<pre><code>get_dump_binary() -&gt; str\n</code></pre> <p>Get the binary used to dump the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.get_dump_args","title":"get_dump_args","text":"<pre><code>get_dump_args() -&gt; str\n</code></pre> <p>Arguments for the dump binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.get_restore_binary","title":"get_restore_binary","text":"<pre><code>get_restore_binary() -&gt; str\n</code></pre> <p>Get the binary used to restore the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.get_restore_args","title":"get_restore_args","text":"<pre><code>get_restore_args() -&gt; str\n</code></pre> <p>Arguments for the restore binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.get_container_env","title":"get_container_env","text":"<pre><code>get_container_env() -&gt; dict[str, str | None]\n</code></pre> <p>Get environment variables from container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.binary_exists_in_container","title":"binary_exists_in_container","text":"<pre><code>binary_exists_in_container(binary_name: str) -&gt; bool\n</code></pre> <p>Check if binary exists inside the container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.get_container_label","title":"get_container_label","text":"<pre><code>get_container_label(\n    label: str, default: str | None = None\n) -&gt; str | None\n</code></pre> <p>Get labels for container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MySQLBackupProvider.get_service_name","title":"get_service_name","text":"<pre><code>get_service_name() -&gt; str\n</code></pre> <p>Get service name (only if started with docker compose).</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider","title":"MariaDbBackupProvider","text":"<pre><code>MariaDbBackupProvider(\n    container: Container,\n    compression: CompressionAlgorithm | None = None,\n)\n</code></pre> <p>Backup provider constructor</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>is_backup_provider</code>             \u2013              <p>Checks if container supports a backup provider</p> </li> <li> <code>validate_file</code>             \u2013              <p>Validate the generated file</p> </li> <li> <code>trigger_webhook</code>             \u2013              <p>Trigger webhook.</p> </li> <li> <code>trigger_error_webhook</code>             \u2013              <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p> </li> <li> <code>trigger_success_webhook</code>             \u2013              <p>Triggers an success on the webhook.</p> </li> <li> <code>get_dump_binary</code>             \u2013              <p>Get the binary used to dump the backup.</p> </li> <li> <code>get_dump_args</code>             \u2013              <p>Arguments for the dump binary.</p> </li> <li> <code>get_restore_binary</code>             \u2013              <p>Get the binary used to restore the backup.</p> </li> <li> <code>get_restore_args</code>             \u2013              <p>Arguments for the restore binary.</p> </li> <li> <code>get_container_env</code>             \u2013              <p>Get environment variables from container.</p> </li> <li> <code>binary_exists_in_container</code>             \u2013              <p>Check if binary exists inside the container.</p> </li> <li> <code>get_container_label</code>             \u2013              <p>Get labels for container.</p> </li> <li> <code>get_service_name</code>             \u2013              <p>Get service name (only if started with docker compose).</p> </li> <li> <code>dump</code>             \u2013              </li> <li> <code>restore</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>default_restore_binary</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary</p> </li> <li> <code>default_restore_args</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary arguments</p> </li> <li> <code>min_file_size</code>               (<code>int</code>)           \u2013            <p>Maximum file size, used to validate the generated file</p> </li> <li> <code>pattern</code>               (<code>str | None</code>)           \u2013            <p>Pattern which is checked in the dumped file</p> </li> <li> <code>plain_file_extension</code>               (<code>str</code>)           \u2013            <p>File extenstion used for the dumped file</p> </li> <li> <code>compression</code>               (<code>CompressionAlgorithm | None</code>)           \u2013            <p>Compression algorithm</p> </li> <li> <code>container</code>               (<code>Container</code>)           \u2013            <p>Container object</p> </li> <li> <code>name</code>           \u2013            </li> <li> <code>default_dump_args</code>           \u2013            </li> <li> <code>default_dump_binary</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider(container)","title":"<code>container</code>","text":"(<code>Container</code>)           \u2013            <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider(compression)","title":"<code>compression</code>","text":"(<code>CompressionAlgorithm | None</code>, default:                   <code>None</code> )           \u2013            <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.default_restore_binary","title":"default_restore_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_binary: str | None = 'RESTORE_COMMAND'\n</code></pre> <p>Default restore binary</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.default_restore_args","title":"default_restore_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_args: str | None = ''\n</code></pre> <p>Default restore binary arguments</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.min_file_size","title":"min_file_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_file_size: int = 200\n</code></pre> <p>Maximum file size, used to validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern: str | None = None\n</code></pre> <p>Pattern which is checked in the dumped file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.plain_file_extension","title":"plain_file_extension  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plain_file_extension: str = '.sql'\n</code></pre> <p>File extenstion used for the dumped file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.compression","title":"compression  <code>instance-attribute</code>","text":"<pre><code>compression: CompressionAlgorithm | None = compression\n</code></pre> <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.container","title":"container  <code>instance-attribute</code>","text":"<pre><code>container: Container = container\n</code></pre> <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'mariadb'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.default_dump_args","title":"default_dump_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_args = '--all-databases'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.default_dump_binary","title":"default_dump_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_binary = 'mariadb-dump'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.is_backup_provider","title":"is_backup_provider","text":"<pre><code>is_backup_provider() -&gt; bool\n</code></pre> <p>Checks if container supports a backup provider</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.validate_file","title":"validate_file","text":"<pre><code>validate_file(file_path: Path) -&gt; bool\n</code></pre> <p>Validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.trigger_webhook","title":"trigger_webhook","text":"<pre><code>trigger_webhook(\n    message: str,\n    address: str,\n    code: int = 0,\n    append: str = \"\",\n) -&gt; None\n</code></pre> <p>Trigger webhook.</p> <p>Parameters:</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.trigger_webhook(message)","title":"<code>message</code>","text":"(<code>str</code>)           \u2013            <p>Message send to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.trigger_webhook(address)","title":"<code>address</code>","text":"(<code>str</code>)           \u2013            <p>If not set taken from the label</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.trigger_webhook(code)","title":"<code>code</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Code which is sent to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.trigger_webhook(append)","title":"<code>append</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path appended to address (can be used for fails)</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.trigger_error_webhook","title":"trigger_error_webhook","text":"<pre><code>trigger_error_webhook(\n    message: str, address: str, code: int = 1\n) -&gt; None\n</code></pre> <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.trigger_success_webhook","title":"trigger_success_webhook","text":"<pre><code>trigger_success_webhook(\n    message: str, address: str, code: int = 0\n) -&gt; None\n</code></pre> <p>Triggers an success on the webhook.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.get_dump_binary","title":"get_dump_binary","text":"<pre><code>get_dump_binary() -&gt; str\n</code></pre> <p>Get the binary used to dump the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.get_dump_args","title":"get_dump_args","text":"<pre><code>get_dump_args() -&gt; str\n</code></pre> <p>Arguments for the dump binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.get_restore_binary","title":"get_restore_binary","text":"<pre><code>get_restore_binary() -&gt; str\n</code></pre> <p>Get the binary used to restore the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.get_restore_args","title":"get_restore_args","text":"<pre><code>get_restore_args() -&gt; str\n</code></pre> <p>Arguments for the restore binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.get_container_env","title":"get_container_env","text":"<pre><code>get_container_env() -&gt; dict[str, str | None]\n</code></pre> <p>Get environment variables from container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.binary_exists_in_container","title":"binary_exists_in_container","text":"<pre><code>binary_exists_in_container(binary_name: str) -&gt; bool\n</code></pre> <p>Check if binary exists inside the container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.get_container_label","title":"get_container_label","text":"<pre><code>get_container_label(\n    label: str, default: str | None = None\n) -&gt; str | None\n</code></pre> <p>Get labels for container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.get_service_name","title":"get_service_name","text":"<pre><code>get_service_name() -&gt; str\n</code></pre> <p>Get service name (only if started with docker compose).</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.dump","title":"dump","text":"<pre><code>dump() -&gt; str\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.MariaDbBackupProvider.restore","title":"restore","text":"<pre><code>restore(backup_file: Path) -&gt; None\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider","title":"PostgresBackupProvider","text":"<pre><code>PostgresBackupProvider(\n    container: Container,\n    compression: CompressionAlgorithm | None = None,\n)\n</code></pre> <p>Postgres backup provider</p> <p>Backup provider constructor</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>restore</code>             \u2013              <p>Restore database</p> </li> <li> <code>is_backup_provider</code>             \u2013              <p>Checks if container supports a backup provider</p> </li> <li> <code>validate_file</code>             \u2013              <p>Validate the generated file</p> </li> <li> <code>trigger_webhook</code>             \u2013              <p>Trigger webhook.</p> </li> <li> <code>trigger_error_webhook</code>             \u2013              <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p> </li> <li> <code>trigger_success_webhook</code>             \u2013              <p>Triggers an success on the webhook.</p> </li> <li> <code>get_dump_binary</code>             \u2013              <p>Get the binary used to dump the backup.</p> </li> <li> <code>get_dump_args</code>             \u2013              <p>Arguments for the dump binary.</p> </li> <li> <code>get_restore_binary</code>             \u2013              <p>Get the binary used to restore the backup.</p> </li> <li> <code>get_container_env</code>             \u2013              <p>Get environment variables from container.</p> </li> <li> <code>binary_exists_in_container</code>             \u2013              <p>Check if binary exists inside the container.</p> </li> <li> <code>get_container_label</code>             \u2013              <p>Get labels for container.</p> </li> <li> <code>get_service_name</code>             \u2013              <p>Get service name (only if started with docker compose).</p> </li> <li> <code>dump</code>             \u2013              <p>Overwrite dump method with custom postgres dump</p> </li> <li> <code>get_restore_args</code>             \u2013              <p>Overwrite restore args with custom postgres arguments</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>min_file_size</code>               (<code>int</code>)           \u2013            <p>Maximum file size, used to validate the generated file</p> </li> <li> <code>pattern</code>               (<code>str | None</code>)           \u2013            <p>Pattern which is checked in the dumped file</p> </li> <li> <code>compression</code>               (<code>CompressionAlgorithm | None</code>)           \u2013            <p>Compression algorithm</p> </li> <li> <code>container</code>               (<code>Container</code>)           \u2013            <p>Container object</p> </li> <li> <code>name</code>           \u2013            </li> <li> <code>default_dump_binary</code>           \u2013            </li> <li> <code>default_dump_args</code>           \u2013            </li> <li> <code>default_restore_binary</code>           \u2013            </li> <li> <code>default_restore_args</code>           \u2013            </li> <li> <code>plain_file_extension</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider(container)","title":"<code>container</code>","text":"(<code>Container</code>)           \u2013            <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider(compression)","title":"<code>compression</code>","text":"(<code>CompressionAlgorithm | None</code>, default:                   <code>None</code> )           \u2013            <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.min_file_size","title":"min_file_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_file_size: int = 200\n</code></pre> <p>Maximum file size, used to validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern: str | None = None\n</code></pre> <p>Pattern which is checked in the dumped file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.compression","title":"compression  <code>instance-attribute</code>","text":"<pre><code>compression: CompressionAlgorithm | None = compression\n</code></pre> <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.container","title":"container  <code>instance-attribute</code>","text":"<pre><code>container: Container = container\n</code></pre> <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'postgres'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.default_dump_binary","title":"default_dump_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_binary = 'pg_dump'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.default_dump_args","title":"default_dump_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_args = '-Fc -U USER'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.default_restore_binary","title":"default_restore_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_binary = 'pg_restore'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.default_restore_args","title":"default_restore_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_args = '-Fc -U USER -d DATABASE'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.plain_file_extension","title":"plain_file_extension  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plain_file_extension = '.dump'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.restore","title":"restore","text":"<pre><code>restore(backup_file: Path) -&gt; None\n</code></pre> <p>Restore database</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.is_backup_provider","title":"is_backup_provider","text":"<pre><code>is_backup_provider() -&gt; bool\n</code></pre> <p>Checks if container supports a backup provider</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.validate_file","title":"validate_file","text":"<pre><code>validate_file(file_path: Path) -&gt; bool\n</code></pre> <p>Validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.trigger_webhook","title":"trigger_webhook","text":"<pre><code>trigger_webhook(\n    message: str,\n    address: str,\n    code: int = 0,\n    append: str = \"\",\n) -&gt; None\n</code></pre> <p>Trigger webhook.</p> <p>Parameters:</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.trigger_webhook(message)","title":"<code>message</code>","text":"(<code>str</code>)           \u2013            <p>Message send to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.trigger_webhook(address)","title":"<code>address</code>","text":"(<code>str</code>)           \u2013            <p>If not set taken from the label</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.trigger_webhook(code)","title":"<code>code</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Code which is sent to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.trigger_webhook(append)","title":"<code>append</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path appended to address (can be used for fails)</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.trigger_error_webhook","title":"trigger_error_webhook","text":"<pre><code>trigger_error_webhook(\n    message: str, address: str, code: int = 1\n) -&gt; None\n</code></pre> <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.trigger_success_webhook","title":"trigger_success_webhook","text":"<pre><code>trigger_success_webhook(\n    message: str, address: str, code: int = 0\n) -&gt; None\n</code></pre> <p>Triggers an success on the webhook.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.get_dump_binary","title":"get_dump_binary","text":"<pre><code>get_dump_binary() -&gt; str\n</code></pre> <p>Get the binary used to dump the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.get_dump_args","title":"get_dump_args","text":"<pre><code>get_dump_args() -&gt; str\n</code></pre> <p>Arguments for the dump binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.get_restore_binary","title":"get_restore_binary","text":"<pre><code>get_restore_binary() -&gt; str\n</code></pre> <p>Get the binary used to restore the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.get_container_env","title":"get_container_env","text":"<pre><code>get_container_env() -&gt; dict[str, str | None]\n</code></pre> <p>Get environment variables from container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.binary_exists_in_container","title":"binary_exists_in_container","text":"<pre><code>binary_exists_in_container(binary_name: str) -&gt; bool\n</code></pre> <p>Check if binary exists inside the container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.get_container_label","title":"get_container_label","text":"<pre><code>get_container_label(\n    label: str, default: str | None = None\n) -&gt; str | None\n</code></pre> <p>Get labels for container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.get_service_name","title":"get_service_name","text":"<pre><code>get_service_name() -&gt; str\n</code></pre> <p>Get service name (only if started with docker compose).</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.dump","title":"dump","text":"<pre><code>dump() -&gt; str\n</code></pre> <p>Overwrite dump method with custom postgres dump</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.PostgresBackupProvider.get_restore_args","title":"get_restore_args","text":"<pre><code>get_restore_args() -&gt; str\n</code></pre> <p>Overwrite restore args with custom postgres arguments</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider","title":"RedisBackupProvider","text":"<pre><code>RedisBackupProvider(\n    container: Container,\n    compression: CompressionAlgorithm | None = None,\n)\n</code></pre> <p>Backup provider constructor</p> <p>Parameters:</p> <p>Methods:</p> <ul> <li> <code>is_backup_provider</code>             \u2013              <p>Checks if container supports a backup provider</p> </li> <li> <code>validate_file</code>             \u2013              <p>Validate the generated file</p> </li> <li> <code>trigger_webhook</code>             \u2013              <p>Trigger webhook.</p> </li> <li> <code>trigger_error_webhook</code>             \u2013              <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p> </li> <li> <code>trigger_success_webhook</code>             \u2013              <p>Triggers an success on the webhook.</p> </li> <li> <code>get_dump_binary</code>             \u2013              <p>Get the binary used to dump the backup.</p> </li> <li> <code>get_dump_args</code>             \u2013              <p>Arguments for the dump binary.</p> </li> <li> <code>get_restore_binary</code>             \u2013              <p>Get the binary used to restore the backup.</p> </li> <li> <code>get_restore_args</code>             \u2013              <p>Arguments for the restore binary.</p> </li> <li> <code>get_container_env</code>             \u2013              <p>Get environment variables from container.</p> </li> <li> <code>binary_exists_in_container</code>             \u2013              <p>Check if binary exists inside the container.</p> </li> <li> <code>get_container_label</code>             \u2013              <p>Get labels for container.</p> </li> <li> <code>get_service_name</code>             \u2013              <p>Get service name (only if started with docker compose).</p> </li> <li> <code>dump</code>             \u2013              </li> <li> <code>restore</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>default_dump_args</code>               (<code>str | None</code>)           \u2013            <p>Default dump binary arguments</p> </li> <li> <code>default_restore_binary</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary</p> </li> <li> <code>default_restore_args</code>               (<code>str | None</code>)           \u2013            <p>Default restore binary arguments</p> </li> <li> <code>pattern</code>               (<code>str | None</code>)           \u2013            <p>Pattern which is checked in the dumped file</p> </li> <li> <code>compression</code>               (<code>CompressionAlgorithm | None</code>)           \u2013            <p>Compression algorithm</p> </li> <li> <code>container</code>               (<code>Container</code>)           \u2013            <p>Container object</p> </li> <li> <code>name</code>           \u2013            </li> <li> <code>min_file_size</code>               (<code>int</code>)           \u2013            </li> <li> <code>default_dump_binary</code>           \u2013            </li> <li> <code>plain_file_extension</code>           \u2013            </li> </ul>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider(container)","title":"<code>container</code>","text":"(<code>Container</code>)           \u2013            <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider(compression)","title":"<code>compression</code>","text":"(<code>CompressionAlgorithm | None</code>, default:                   <code>None</code> )           \u2013            <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider-attributes","title":"Attributes","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.default_dump_args","title":"default_dump_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_args: str | None = None\n</code></pre> <p>Default dump binary arguments</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.default_restore_binary","title":"default_restore_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_binary: str | None = 'RESTORE_COMMAND'\n</code></pre> <p>Default restore binary</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.default_restore_args","title":"default_restore_args  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_restore_args: str | None = ''\n</code></pre> <p>Default restore binary arguments</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.pattern","title":"pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>pattern: str | None = None\n</code></pre> <p>Pattern which is checked in the dumped file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.compression","title":"compression  <code>instance-attribute</code>","text":"<pre><code>compression: CompressionAlgorithm | None = compression\n</code></pre> <p>Compression algorithm</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.container","title":"container  <code>instance-attribute</code>","text":"<pre><code>container: Container = container\n</code></pre> <p>Container object</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name = 'redis'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.min_file_size","title":"min_file_size  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>min_file_size: int = 50\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.default_dump_binary","title":"default_dump_binary  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_dump_binary = 'redis-cli'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.plain_file_extension","title":"plain_file_extension  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plain_file_extension = '.rdb'\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider-functions","title":"Functions","text":""},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.is_backup_provider","title":"is_backup_provider","text":"<pre><code>is_backup_provider() -&gt; bool\n</code></pre> <p>Checks if container supports a backup provider</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.validate_file","title":"validate_file","text":"<pre><code>validate_file(file_path: Path) -&gt; bool\n</code></pre> <p>Validate the generated file</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.trigger_webhook","title":"trigger_webhook","text":"<pre><code>trigger_webhook(\n    message: str,\n    address: str,\n    code: int = 0,\n    append: str = \"\",\n) -&gt; None\n</code></pre> <p>Trigger webhook.</p> <p>Parameters:</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.trigger_webhook(message)","title":"<code>message</code>","text":"(<code>str</code>)           \u2013            <p>Message send to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.trigger_webhook(address)","title":"<code>address</code>","text":"(<code>str</code>)           \u2013            <p>If not set taken from the label</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.trigger_webhook(code)","title":"<code>code</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Code which is sent to the webhook</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.trigger_webhook(append)","title":"<code>append</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>Path appended to address (can be used for fails)</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.trigger_error_webhook","title":"trigger_error_webhook","text":"<pre><code>trigger_error_webhook(\n    message: str, address: str, code: int = 1\n) -&gt; None\n</code></pre> <p>Triggers an error on the webhook. <code>code</code> is appended to the address.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.trigger_success_webhook","title":"trigger_success_webhook","text":"<pre><code>trigger_success_webhook(\n    message: str, address: str, code: int = 0\n) -&gt; None\n</code></pre> <p>Triggers an success on the webhook.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.get_dump_binary","title":"get_dump_binary","text":"<pre><code>get_dump_binary() -&gt; str\n</code></pre> <p>Get the binary used to dump the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.get_dump_args","title":"get_dump_args","text":"<pre><code>get_dump_args() -&gt; str\n</code></pre> <p>Arguments for the dump binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.get_restore_binary","title":"get_restore_binary","text":"<pre><code>get_restore_binary() -&gt; str\n</code></pre> <p>Get the binary used to restore the backup.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.get_restore_args","title":"get_restore_args","text":"<pre><code>get_restore_args() -&gt; str\n</code></pre> <p>Arguments for the restore binary.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.get_container_env","title":"get_container_env","text":"<pre><code>get_container_env() -&gt; dict[str, str | None]\n</code></pre> <p>Get environment variables from container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.binary_exists_in_container","title":"binary_exists_in_container","text":"<pre><code>binary_exists_in_container(binary_name: str) -&gt; bool\n</code></pre> <p>Check if binary exists inside the container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.get_container_label","title":"get_container_label","text":"<pre><code>get_container_label(\n    label: str, default: str | None = None\n) -&gt; str | None\n</code></pre> <p>Get labels for container.</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.get_service_name","title":"get_service_name","text":"<pre><code>get_service_name() -&gt; str\n</code></pre> <p>Get service name (only if started with docker compose).</p>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.dump","title":"dump","text":"<pre><code>dump() -&gt; str\n</code></pre>"},{"location":"reference/db_backup_runner/provider/#db_backup_runner.provider.RedisBackupProvider.restore","title":"restore","text":"<pre><code>restore(backup_file: Path) -&gt; None\n</code></pre>"}]}